
import java.io.*;


public class Match {

	private static int adjMatrixGM[][];
	private static int adjMatrixGD[][];
	
	public static void main (String [] args){
		
		if (args.length < 2){
			usage();
		}else {
			matchSubGraph(args[0], args[1]);
		}


	}
	
	/**
	 * Description of usage: Helper method for main. Helps to inform the user
	 * if the main program fails to run. 
	 * 
	 * @param none
	 * @version Based on previous programming assignment. 
	 *          Credit to UW CSE 373. Edited to be usable in this homework. 
	 * @return prints appropriate information to user if argument is less than 2
	 */
	private static void usage(){
		System.out.println("Usage: java Match <command [query GM file] [query GD file]> ");
		System.out.println("Commands:");
		System.out.printf("\n\t[query GM file] - text file that contains graph object" );
		System.out.printf("\n\t[query GD file] - text file that contains graph image" );
		System.exit(1);
	}
	
	private static  void matchSubGraph (String GM_filename, String GD_filename){
		GraphData GM = getGraphData(GM_filename);
		GraphData GD = getGraphData(GD_filename);
		
		adjMatrixGM = GM.adjMatrix;
		adjMatrixGD = GD.adjMatrix;
		
		VertexSet VM = new VertexSet (GM.numNodes);
		VertexSet VD = new VertexSet (GD.numNodes);

		searchIsomorphic(VM, VD);	
	}
	
	/**
	 * Description of getGraphData: Helper method for matchSubGraph. 
	 * Process the graph.txt and store all necessary information into 
	 * the GraphData object. 
	 * 
	 * @param filename (String) - filename of graph text file 
	 * @return a new GraphData Object with all information in text file
	 */
	private static GraphData getGraphData (String filename){
		
		String read;
		String node [];
		GraphData myGraph = null; 
		BufferedReader b = null;
		
		try{
			b = new BufferedReader (new FileReader(filename));
			String graphName = b.readLine(); 
			
			int numNodes = Integer.parseInt(b.readLine());
			int numEdges = Integer.parseInt(b.readLine());
			
			myGraph = new GraphData(graphName, numNodes, numEdges);

			
			// Adjacency Matrix information 
			while((read = b.readLine())!= null && 
				   (read != "") && (read != " ")){
				
				node = read.split(" ");
				myGraph.addEdge(Integer.parseInt(node[0]), 
						        Integer.parseInt(node[1]));
			}
			
			if (b != null) b.close();
		}catch (IOException e){
			e.printStackTrace();
		}

		return myGraph;
	}
	
	/**
	 * Description of searchIsomorphic: Helper method for matchSubGraph
	 * Search for all possible instances of subgraph isomorphism, that is, 
	 * find all copies of GM in GD, where all mapping has zero error. <br>
	 * 
	 * Note: This searchIsomorphic call the recursive searchIsomorphic <br>
	 * 
	 * Pre condtion: Adjacency Matrix must be setup up.
	 * 
	 * @param VM (VertexSet) - Vertex set of undirected Graph Model(GM)
	 * @param VD (VertexSet) - Vertex set of undirected Graph Data (GD)
	 * 
	 * @return prints all instances of subgraph isomorphism if any;
	 * 		   Otherwise, no output.  
	 */
	private static void searchIsomorphic(VertexSet VM, VertexSet VD){
	
		for (int i = 0; i < VD.size; i++){
				
			IsomorphicSet hCopy = new IsomorphicSet(VM.size);
			hCopy.addMapping(VM.getVertice(0), VD.getVertice(i));
				
			VertexSet VMCopy = new VertexSet(VM, 0);
			VertexSet VDCopy = new VertexSet(VD, i);
			
			searchIsomorphic(VMCopy, VDCopy, hCopy);	
		}
	}  
	
	
	/**
	 * Description of searchIsomorphic: Recursive backtracking tree search
	 * to find all copies of GM in GD. In other words, find all mapping with 
	 * zero error. <br>
	 * 
	 * Pre condtion: Adjacency Matrix must be setup up.
	 *               VertexSet VM, VD and IsomorphicSet h must be copies of 
	 *               the original or similar, or otherwise no guarantee that 
	 *               the original object might be modified. 
	 * 
	 * @param VM (VertexSet) - Vertex set of undirected Graph Model(GM)
	 * @param VD (VertexSet) - Vertex set of undirected Graph Data (GD)
	 * @param h (Isomorphic Set) - Isomorphic set to hold all the isomorphism mapping 
	 * 							   between vertices from VM and VD 
	 * 
	 * @return prints all instances of subgraph isomorphism if any;
	 * 		   Otherwise, no output.  
	 */
	private static void searchIsomorphic(VertexSet VM, VertexSet VD, IsomorphicSet h){
		
		for (int j = 0; j < VD.size && VM.size != 0; j++){
				
				IsomorphicSet hCopy = new IsomorphicSet(h);
				hCopy.addMapping(VM.getVertice(0), VD.getVertice(j));
			
				if (isMappingOk(hCopy)){
					//System.out.print("\nok");
					VertexSet VMCopy = new VertexSet(VM, 0);
					VertexSet VDCopy = new VertexSet(VD, j);
					
					if (hCopy.isComplete()){//VMCopy.isEmpty(VM) && ){
						//System.out.print("\nprint");
						hCopy.printIsomorphism(); 
					}else{
						searchIsomorphic(VMCopy, VDCopy, hCopy);
					}	
				}
		}
	}
	
	/**
	 * Description of isMappingOk: Helper method for recursive searchIsomorphic method 
	 * to determine if the isomorphic mapping is valid. <br>
	 * 
	 * Pre condition: Vertices from VM and VD need to be added into IsomorphicSet h 
	 * 
	 * @param h (IsomorphicSet) - Isomorphic set to hold all the isomorphism mapping 
	 * 							   between vertices from VM and VD 
	 * @return true if there exists such a undirected subgraph isomorphic mapping between
	 *         subgraph GD and subgraph GM; Otherwise, false. 
	 */
	
	private static boolean isMappingOk(IsomorphicSet h){
		for (int i =0; i < (h.curIndexPtr); i++){
			int xCurVM = h.getMapValue(0, i);
			int xCurVD = h.getMapValue(1, i);
			for (int j = 0; j< (h.curIndexPtr); j++){
				if (i != j){
					int xTempVM = h.getMapValue(0, j);
					int xTempVD = h.getMapValue(1, j);
					if (adjMatrixGM[xCurVM][xTempVM] != 0 && 
						adjMatrixGM[xCurVM][xTempVM] != adjMatrixGD[xCurVD][xTempVD]){
						
						h.removeMapping();
						return false; 
					}
				}
			}
		}
		return true;
	}

}

class GraphData {
	String graphName; 
	int numNodes; 
	int numEdges; 
	int adjMatrix [][];
	int vertices[];

	public GraphData(String graphName, int numNodes, int numEdges){
		this.graphName = graphName; 
		this.numNodes = numNodes; 
		this.numEdges = numEdges; 
		adjMatrix = new int [numNodes][numNodes];
		// initalize all values of adj matrix 
		for(int i =0; i < numNodes; i++){
			for(int j =0; j < numNodes; j++){
				adjMatrix[i][j] = 0;
			}
		}
	}
	
	void addEdge(int nodeA, int nodeB){
		adjMatrix[nodeA-1][nodeB-1] = 1;
		adjMatrix[nodeB-1][nodeA-1] = 1;
	}
}











