
import java.io.*;



public class Graph {
	
	private static int adjMatrix [][][]; 
	
	private static void main (String [] args){
		adjMatrix = new int [2][][];
		
		matchSubGraph(args[0], args[1]);
	
		

		
	}
	
	private static void matchSubGraph (String GM_filename, String GD_filename){
		GraphData GM = getGraphData(GM_filename);
		GraphData GD = getGraphData(GD_filename);
		
		int adjMatrixGM[][] = GM.adjMatrix;
		int adjMatrixGD[][] = GD.adjMatrix;
		
		VertexSet VM = new VertexSet (GM.numNodes);
		VertexSet VD = new VertexSet (GD.numNodes);
		
		IsomorphicSet hMap = new IsomorphicSet(GM.numNodes);
		
		printTestGraphData(GM);
		System.out.println();
		printTestGraphData(GD);
	}
	
	private static void searchSubGraph(VertexSet VM, VertexSet VD, ){
		
	}
}

class IsomorphicSet {
	int mapping [][]; 
	int curIndexPtr;
	int size; 
	static int numSets = 2;
	
	public IsomorphicSet (int size){
		this(size, 0, new int [numSets][size]);
		for (int i = 0; i < numSets; i++){
			for (int j =0; j < size; j++){
				mapping[i][j] = -5;
			}
		}
	}
	
	public IsomorphicSet (int size, int curIndexPtr, int [][] mapping){
		this.size = size; 
		this.mapping = mapping; 
		curIndexPtr = this.curIndexPtr; 
	}
	
	public IsomorphicSet (IsomorphicSet toBeCopy){
		this(toBeCopy.size, toBeCopy.curIndexPtr, new int [numSets][toBeCopy.size]);
		int copyMe [][] = toBeCopy.mapping;
		for (int i = 0; i < numSets; i++){
			for (int j =0; j < this.size; j++){
				mapping[i][j] = copyMe[i][j];
			}
		}
	}

	//ISOMORPHISM: {(1,2),(2,3),(3,4)}
	public void printIsomorphism () {
		System.out.print("\nISOMORPHISM: {");
		for (int i = 0; i <= curIndexPtr ; i++){
			System.out.print("(");
			System.out.print(mapping[0][i]);
			System.out.print(","); 
			System.out.print(mapping[1][i]);
			System.out.print(")");
			if (i != curIndexPtr){
				System.out.print(","); 
			}
		}
		System.out.print("}");
	}
	
	public void addMapping(int VM, int VE, boolean increment){
		mapping[0][curIndexPtr] = VM; 
		mapping[1][curIndexPtr] = VE; 
		if (increment){
			curIndexPtr ++; 
		}
	}
}



class VertexSet {
	int vertices [];
	int size;
	
	public VertexSet(int size){
		this (size, new int[size]);
		for(int i = 0; i < size; i++){
		   vertices[i] = i;
		}
	}
	
	public VertexSet(int size, int [] vertices){
		this.size = size; 
		this.vertices = vertices;
	}
	
	public VertexSet(VertexSet toBeCopy, int indexToBeRemove){
		this(toBeCopy.size-1, new int[toBeCopy.size-1]);
		int i = 0; 
		int copyMe [] = toBeCopy.vertices;
		for (i =0; i < indexToBeRemove; i++){
			vertices[i] = copyMe[i];
		}
		for (int j = i; j < size; j++){
			vertices[j] = copyMe[j + 1];
		}
		
	}
}

class GraphData {
	String graphName; 
	int numNodes; 
	int numEdges; 
	int adjMatrix [][];
	int vertices[];
	
	public GraphData(String graphName, int numNodes, int numEdges){
		this.graphName = graphName; 
		this.numNodes = numNodes; 
		this.numEdges = numEdges; 
		adjMatrix = new int [numNodes][numNodes];
		// initalize all values of adj matrix 
		for(int i =0; i < numNodes; i++){
			for(int j =0; j < numNodes; j++){
				adjMatrix[i][j] = 0;
			}
		}
	}
	
	void addEdge(int nodeA, int nodeB){
		adjMatrix[nodeA-1][nodeB-1] = 1;
		adjMatrix[nodeB-1][nodeA-1] = 1;
	}
	
	
}